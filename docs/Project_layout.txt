mock ups
	{
		https://graphicsfamily.com/downloads/wood-3d-logo-mockups/
		https://graphicsfamily.com/downloads/free-psd-rubber-stamp-3d-logo-mockup/
		https://graphicsfamily.com/downloads/3d-logo-mockup-on-office-room-black-wall/
		https://graphicsfamily.com/downloads/photorealistic-logo-mockup-on-leather-background/
		https://graphicsfamily.com/downloads/stamping-leather-logo-mockup/
		https://graphicsfamily.com/downloads/silver-logo-mockup-on-steel-background-texture/
		
		
	}
Engineering Course{
	https://learn.saylor.org/course/view.php?id=731
}
https://event.on24.com/wcc/r/4384034/CBA77CD670F1E9C6938BE4B2D422A018

Clerestory Roof
https://www.architecturaldesigns.com/house-plans/3-bed-modern-house-plan-under-2000-square-feet-with-detached-garage-70823mk
Live app at https://authapp-397212.web.app/ and https://authapp-397212.firebaseapp.com/

https://godesign.pk/

https://vercel.com
render.com

https://express-server-dmq0.onrender.com/send-review

https://moshweutipe3.wixsite.com/tipe3


https://render.com/docs/custom-domains#adding-a-wildcard-custom-domain
https://demo.aspnetzero.com/app/admin/users
https://geeksarray.com/blog/how-to-use-automapper-in-aspnet-core-web-api
						   ----------------------AERO-SPACE-----------------
Tenant Mangement System
  [User defination]
    Admin - Top Level user, responsible to manage the system
    // Developer - responsible for property [  ]
	Property Administrator - responsible to capture, export all related data about the property
			[create building and apartment]
    Property Caretaker - manage security
    Landlord - responsible to manage apartment
    Access control Officer - control access to property [ Approve new tenant and register new visitor and their accesories ]
    
    --------- mobile app version ----------
    Tenant - add visitor
    Visitor - 
----------------------------------------------------------------------------
   [Data defination] 
    Apartment {apartment-number, apartment-type:[bachelor, suite, twin] landlord_Id, building_Id, tenant_Id, visitor_Id, }
	Caretaker {  } //Feature ro be added later
	Access-control {  }
	Landlord { firstname, lastname, email, Apartment_Id }
	Tenant { firstname, lastname, email, Apartment_Id }
	visitor { firstname, lastname, email, Apartment_Id, tenant_Id }
    
AUTHENTICATION > The process for identifying user <Username_Password>
  client > controller > service > userDatabase

Controllers
  * AccountController
  
Service
  * AccountService
  
 
 C# Library
  * UserManager
  
 [Task]
  implement login (plain)
 
 Data
  LogInDto
  
-----------------------------------------------------------------------------------
  {
  "id": "string1",
  "email": "Mokone@gmail.com",
  "firstname": "Lebo",
  "lastname": "Mokone",
  "phoneNumber": "25516753",
  "roles": [
    "Admin"
  ]
}
me@co.com
&tdbGSV28MV)!n-
  FEATURES
    Third Party Intergration
    * Intergrate google Authentication
    * --
    
    Email COnfirmation
    

{
  "email": "canemary@microsoft.com",
  "password": "Mary@1234"
}

{
  "email": "dineo@gmail.com",
  "password": "Dineo@24"
}

 public async Task<string> GenerateJwtToken(string id)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes("fqhhLNdRJRKE4FbbiFMYHNybkI4qHZLb");

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                //Subject = new ClaimsIdentity(await GetClaims()),
                Claims = await GetClaims(),
                Expires = DateTime.UtcNow.AddHours(1),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature),
                Issuer = "AuthApp",
                Audience = "https://localhost:44331/api/",
                
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);

            return $"Bearer { tokenHandler.WriteToken(token)}";
        }
        
  ----------------------------------------------------------------------------------------------
The auth guard is an angular route guard that's used to prevent unauthenticated or unauthorized users from accessing restricted routes, it does this by implementing the CanActivate interface which allows the guard to decide if a route can be activated with the canActivate() method. If the method returns true the route is activated (allowed to proceed), otherwise if the method returns false the route is blocked.
https://jasonwatmore.com/post/2022/12/22/angular-14-role-based-authorization-tutorial-with-example
https://www.bezkoder.com/angular-16-jwt-auth/#Create_Role-based_Components

https://www.c-sharpcorner.com/article/policy-based-role-based-authorization-in-asp-net-core/
https://coderethinked.com/policy-based-authorization-in-asp-net-core/
----------------------------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------
https://stackoverflow.com/questions/9904426/how-to-block-a-mobile-number-call-and-message-receiving-in-android-application-d
https://copyprogramming.com/howto/how-to-block-incoming-calls-in-android-programmatically
https://source.android.com/docs/core/connect/block-numbers
----------------------------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------
import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthGuard } from '../auth/auth.gard';
import { AuthService } from '../service/auth-service.service';
import { ProfileService } from '../service/profile.service';
import { UserService } from '../service/user-service.service';

@Component({
  selector: 'app-admin',
  templateUrl: './admin.component.html',
  styleUrls: ['./admin.component.css']
})

export class AdminComponent implements OnInit {
  //
  //profile$!: Observable<any>;
  profile: any;

  constructor(
    private userService: UserService,
    private authService: AuthService,
    private authGard: AuthGuard,
    private profileService: ProfileService
    ) 
    { }

  ngOnInit(): void {


    if(this.authGard){
      console.log('Get User profile....');
      this.profile = this.userService.getUserById(this.authService.getId())
      .subscribe(
        (response: any) => {
          console.log(response)
        },
        (error) =>{
          console.log(error)
        }
      );
      this.profileService.setUser(this.profile)

      console.log('Profile: ' + this.profileService.getUser());
      console.log('Token: ' + this.authService.getToken());
    }
  }
}

Hi Lesiba.

Please use this code 087561 as your confirmtion.

Regards
App Auth Team

-------------------------------------------------------------------------
https://eatradingacademy.com/metatrader-4-tutorial/
https://www.babypips.com/learn/forex/introduction-to-metatrader4

---------------------------------------------------------------------------------
ENTITY MIGRATION
PS C:\Users\iamtipe\source\repos\AuthApp\api\AuthApp\AuthApp> 
>> dotnet ef migrations add apartment-role-configuration
>> dotnet ef database update
dotnet ef migrations remove
-------------------------------------------------------------------------------------------
UNIT OF WORK AND REPOSITORY
https://www.c-sharpcorner.com/UploadFile/b1df45/unit-of-work-in-repository-pattern/
https://medium.com/@mxcmxc/unit-of-work-with-repository-pattern-boilerplate-518726e4beb7


-------------------------------------------------------------------------------------------
public void Update<T>(T item) where T: Entity
{
    // assume Entity base class have an Id property for all items
    var entity = _collection.Find(item.Id);
    if (entity == null)
    {
        return;
    }

    _context.Entry(entity).CurrentValues.SetValues(item);
}
-------------------------------------------------------------------------------------------

{

  "id": "081a6279-e1ae-44c0-933d-bba60134c73e",
  "firstname": "Jacob",
  "lastname": "string",
"username": "Jane@123",
  "roles": [
    "Caretaker","Landlord"
  ]
}

var user = mapper.Map<User>(userDto);

var results = await userService.Update(userDto);

switch (results)
{
	case 0:
		return BadRequest("User couled not be found");
		break;
	case 1:
		return Ok();
		break;
}
0625656365
-----------------------------------------------------------------------------------------------------
ng g c authentication/forgot-password --skip-tests
if (!resetPassResult.Succeeded)
    {
        var errors = resetPassResult.Errors.Select(e => e.Description);
        return BadRequest(new { Errors = errors });
    }
--------------------------------------------------------------------------------------------------------
NGULR RESET PASSWORD
https://code-maze.com/angular-password-reset-functionality-with-aspnet-identity/
------------------------------------------------------------------------------------------------------
https://stackoverflow.com/questions/12144000/using-custom-fonts-using-css
----------------------------------------------------------------------------------------------------------
customize the authorization logic =>
https://medium.com/@sagarkumar2499/role-based-authorization-asp-net-core-5f3c6345073d

https://www.c-sharpcorner.com/article/policy-based-role-based-authorization-in-asp-net-core/
---------------------------------------------------------------------------------------------------------
LOGGING
https://stackify.com/log4net-guide-dotnet-logging/
------------------------------------------------------------------------------------------------------------



[SITE ADMINISTRATION] - Property-Admin

	> General - (settings,)
	> Users[ Account[user-list,add-user], Permossions[define-role,manage roles]]
	> Buildings[crud]
	> Access Control [Manage access control settings]

[ PROPERTY ] - Property-Caretaker
	> Buildings
	> Apartments


=B4-(C4*100)

https://www.w3schools.com/howto/howto_css_image_overlay.asp